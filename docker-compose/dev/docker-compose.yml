version: "3.7"

networks:
  spring-cloud-network:
    driver: bridge

services:

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    extends:
      file: base-compose.yml
      service: base-network-service

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    extends:
      file: base-compose.yml
      service: base-network-service

  config-server:
    extends:
      file: base-compose.yml
      service: base-resource-service
    image: timlien/config:1.0.0
    container_name: config-server
    ports:
      - "8071:8071"
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "/cnb/process/health-check" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    environment:
      THC_PATH: /actuator/health
      THC_PORT: 8071

  eureka-server:
    extends:
      file: base-compose.yml
      service: base-application-service
    image: timlien/eureka:1.0.0
    container_name: eureka-server
    ports:
      - "8070:8070"
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      THC_PORT: 8070

  gateway-server:
    extends:
      file: base-compose.yml
      service: base-application-service
    image: timlien/gateway:1.0.0
    container_name: gateway-server
    ports:
      - "8072:8072"
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      THC_PORT: 8072

  account-service:
    extends:
      file: base-compose.yml
      service: base-application-service
    image: timlien/account:1.0.0
    container_name: account-service
    ports:
      - "8080:8080"
    depends_on:
      eureka-server:
        condition: service_healthy
      account-database:
        condition: service_healthy
    environment:
      THC_PORT: 8080

  account-database:
    image: mysql:8.0
    container_name: account-database
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: "account"
    extends:
      file: base-compose.yml
      service: base-mysql-service

  loan-service:
    extends:
      file: base-compose.yml
      service: base-application-service
    image: timlien/loan:1.0.0
    container_name: loan-service
    ports:
      - "8090:8090"
    depends_on:
      eureka-server:
        condition: service_healthy
      loan-database:
        condition: service_healthy
    environment:
      THC_PORT: 8090

  loan-database:
    image: mysql:8.0
    container_name: loan-database
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: "loan"
    extends:
      file: base-compose.yml
      service: base-mysql-service

  card-service:
    extends:
      file: base-compose.yml
      service: base-application-service
    image: timlien/card:1.0.0
    container_name: card-service
    ports:
      - "9000:9000"
    depends_on:
      eureka-server:
        condition: service_healthy
      card-database:
        condition: service_healthy
    environment:
      THC_PORT: 9000

  card-database:
    image: mysql:8.0
    container_name: card-database
    ports:
      - "3308:3306"
    environment:
      MYSQL_DATABASE: "card"
    extends:
      file: base-compose.yml
      service: base-mysql-service

  loki-read:
    image: grafana/loki:2.9.2
    container_name: loki-read
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../config/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      spring-cloud-network:
        aliases:
          - loki

  loki-write:
    image: grafana/loki:2.9.2
    container_name: loki-write
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../config/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    volumes:
      - ../config/promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway-nginx
    extends:
      file: base-compose.yml
      service: base-network-service

  minio:
    image: minio/minio
    container_name: minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
#    volumes:
#      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: base-compose.yml
      service: base-network-service

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway-nginx
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway-nginx:3100
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
        EOF
        /run.sh
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: base-compose.yml
      service: base-network-service

  gateway-nginx:
    image: nginx:latest
    container_name: gateway-nginx
    depends_on:
      - loki-read
      - loki-write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://loki-write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://loki-read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://loki-read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://loki-write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://loki-read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://loki-read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: base-compose.yml
      service: base-network-service